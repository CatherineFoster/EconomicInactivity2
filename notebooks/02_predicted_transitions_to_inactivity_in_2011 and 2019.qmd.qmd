---
title: "01_extract_pid_and_econ"
author: "Jon Minton; Martin Taulbut"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(haven)
library(here)

```

```{r}
base_dir_location <- "big_data/UKDA-6614-stata/stata/stata13_se/ukhls"
```

```{r}
indresp_files <- dir(here(base_dir_location), pattern = "[a-z]_indresp.dta", full.names = TRUE)
```

variables and types of variable to extract

From Martin

> Create a new variable JOBSAT, which recodes jbsat into two categories, zero to 4=1 and 5 to 7=0, and excluding missing values (-1 to -8) (Main survey -- Variable:jbsat satisfaction with present job \| Understanding Society)
>
> Create a new variable AUTONOMY, which is derived from the mean of wkaut1, wkaut2, wkaut3, wkaut4 and wkaut5 (Variable search \| Understanding Society), excluding missing values (-1 to -8)
>
> Recode AUTONOMY into two categories, \<2=0, and 2 or more=1. Recodejbsec into a new variable, JOBSEC, where 1 or 2=1 and 3 or 4=0 (Exclude missing values . -1,-8)

```{r}
varnames <-  c(
  "jbstat", "dvage", "sex", "hiqual_dv", "hhtype_dv",
  "ethn_dv", # ethnicity
  "jbsat", #job satisfaction
  "wkaut1", # autonomy measures
  "wkaut2", 
  "wkaut3", 
  "wkaut4", 
  "wkaut5", 
  "jbsec" # job security
  )

extract_what <- c(
  "labels", "values", 
  "labels", "labels", "labels",
  "labels", "values",
  "values", "values", "values", "values", "values",
  "values"
  )
```

Convenience function:

```{r}
extract_vars_and_make_long <- function(dta, varnames, extract_what = 'labels', verbose = TRUE){
  
  #dta should be a dataframe
  stopifnot("dta is not a dataframe" = "data.frame" %in% class(dta))
  
  #varnames should be a vector of strings of length 1 or above 
  stopifnot("varnames does not have contents" = length(varnames) > 0)
  stopifnot("varnames is not of mode character" = mode(varnames) == "character")
  
  # extract_what should be either of length 1 or the length of varnames
  stopifnot("extract_what is not length 1 or length of varnames" = 
              length(extract_what) == 1 | 
              length(extract_what) == length(varnames)
  )
  
  # each element of extract_what should be one of 'labels', 'values' or 'both
  stopifnot("elements of extract_what are not each one of 'labels', 'values' or 'both'" = 
              sapply(extract_what, 
                     FUN = function(x) x %in% c("values", "labels", "both")
              ) %>% 
              all()
  )
  
  start_time = Sys.time()
  # Want to adapt this to work with multiple varnames
  var_list <- list()
  
  
  extract_var_and_make_long <- function(dta, varname, extract_what){
    out <- dta %>% 
       # hard-coded for now
       select(pidp, matches(paste0("^[a-z]{1}_", varname, "$"))) %>% 
       pivot_longer(-pidp) %>% 
      separate_wider_delim(
        name, 
        delim = "_", 
        too_many = 'merge', 
        names = c("wave", "variable")
      ) %>%
      mutate(value = as_factor(value, levels = extract_what) %>% 
               as.character()
      )
    out
  }
  
  for (i  in seq_along(varnames)){
    what_to_extract = if (length(extract_what) == 1) {
      extract_what
    } else {
        extract_what[i]
    }
    var_list[[i]] <- extract_var_and_make_long(dta, varnames[i], extract_what = what_to_extract)
  }
  
  out <- bind_rows(var_list)
  end_time = Sys.time()
  if (verbose){
    print(
      paste(
        "extracted", length(varnames), "variables in", 
        difftime(end_time, start_time, units = "secs"),
        "seconds"
      )
    )
  }
  out
}


```

```{r}

read_and_slim_data <- function(file_location, varnames, extract_what, verbose = TRUE){
  if (verbose) {
    print(paste("extracting file:",file_location))
    start_time = Sys.time()
    }
  full_data <- haven::read_dta(file_location)
  if (verbose) {
    end_time = Sys.time()
    print(paste("read file in", difftime(end_time, start_time, units = "secs"), "seconds"))
    print(paste("slimming file..."))
    
    }
  slim_long_data <- extract_vars_and_make_long(full_data, varnames = varnames, extract_what = extract_what, verbose = verbose)
  slim_long_data
}

overall_start_time = Sys.time()

long_slimmed_datalist <- lapply(indresp_files, 
       read_and_slim_data, 
       varnames = c("jbstat", "dvage", "sex", "hiqual_dv", "hhtype_dv"), 
       extract_what = c("labels", "values", "labels", "labels", "labels"), 
       verbose = TRUE
)

long_slimmed_data <- bind_rows(long_slimmed_datalist)

overall_end_time = Sys.time()

print(paste(
  "Overall process took",
  difftime(overall_end_time, overall_start_time, units = "mins"),
  "minutes"
))
rm(long_slimmed_datalist)
long_slimmed_data

```

We now need to standardise the economic activity categories across all waves.

We've created a spreadsheet with our proposed regroupings

```{r}
econ_act_groups <- readxl::read_excel(path = here("data/economic_activities_categories.xlsx"), sheet = 'categories') %>% 
  janitor::clean_names()

```

I also want to do something similar with highest qualification

```{r}
long_slimmed_data <- 
long_slimmed_data %>% 
  left_join(
    econ_act_groups %>% select(original, recoded = level_2_meso), 
    by = c('value' = 'original')
  ) %>% 
  mutate(
    value = ifelse(!is.na(recoded), recoded, value)
  ) %>% 
  select(-recoded) %>% 
    mutate(
    highqual = case_when(
      value %in% c("A level etc", "A-level etc") ~ "A-level etc",
      value %in% c("No qual", "No qualification") ~ "No qualification",
      value %in% c("Other higher", "Other higher degree") ~ "Other higher degree",
      value %in% c("Other qual", "Other qualification") ~ "Other qualification",
      value == "Degree" ~ "Degree",
      value == "GCSE etc" ~ "GCSE etc",
      value %in% c("inapplicable", "missing") ~ "Inapplicable or missing",
      TRUE ~ NA_character_
    )
  ) %>% 
  mutate(
    # Now going to make this three levels only
    simplified_highest_qualification = case_when(
      highqual == "No qualification" ~ "No qualification",
      highqual %in% c("GCSE etc", "Other qualification", "A-level etc") ~ "Intermediate qualifications",
      highqual %in% c("Degree", "Other higher degree") ~ "Degree or above",
      TRUE ~ NA_character_
    )
  ) %>% 
  mutate(
    value = ifelse(!is.na(simplified_highest_qualification), simplified_highest_qualification, value)
  ) %>% 
  select(-highqual, -simplified_highest_qualification)

long_slimmed_data
```

Now to regroup the economic inactivity variables...

## Analysis

What we want to do:

-   Partition the dataset into two smaller datasets
    -   waves a-c (i.e. predicting whether econ inact in c based on a and b)
    -   waves h-j (i.e. predicting whether econ inact in j based on h and i)
-   Link to age
    -   partition into age groups ?
    -   filter by age group?
-   link to sex
-   link to highest qualification

First things first (a tautology), let's do the model for predicting whether econ inact at wave c

```{r}
extract_three_periods <- function(data, waves){
  data %>% 
    filter(wave %in% waves) %>% 
    filter(!(variable %in% c('dvage', 'sex', 'hiqual_dv', 'hhtype_dv', 'fihhmnnet3_dv'))) %>% 
    left_join(
      data %>% 
        filter(variable == "dvage") %>% 
        filter(wave == waves[1]) %>% 
        mutate(age_at_start = as.double(value)) %>% 
        select(pidp, age_at_start)    
    ) %>% 
    left_join(
      data %>% 
        filter(variable == 'sex') %>% 
        filter(wave == waves[1]) %>% 
        mutate(sex = value) %>% 
        select(pidp, sex)
    ) %>% 
    left_join(
      data %>% 
        filter(variable == 'hiqual_dv') %>% 
        filter(wave == waves[1]) %>% 
        mutate(highest_qualification = value) %>% 
        select(pidp, highest_qualification)
    ) %>% 
    left_join(
      data %>% 
        filter(variable == "hhtype_dv") %>% 
        filter(wave == waves[1]) %>% 
        mutate(hh_type = value) %>% 
        select(pidp, hh_type)
    ) %>% 

    filter(variable == 'jbstat') %>% 
    select(-variable) %>% 
    mutate(
      period = case_when(
        wave == waves[1] ~ 'previous',
        wave == waves[2] ~ 'last',
        wave == waves[3] ~ 'current'
      )
    ) %>% 
    select(-wave) %>% 
    pivot_wider(names_from = period, values_from = value)
  
}

data_2009to2011 <- extract_three_periods(long_slimmed_data, c("a", "b", "c")) %>% 
  filter(between(age_at_start, 16, 60))

data_2016to2019 <- extract_three_periods(long_slimmed_data, c("h", "i", "j")) %>% 
  filter(between(age_at_start, 16, 60))

```

Some prior expectations:

-   economic inactivity will be U-shaped with age (will need squared term for this)
-   econ inact will be higher in females than males
-   two previous spells of econ inact strongest positive predictor of econ_inact in wave c
-   two previous spells of employment strongest negative predictor of econ_inact in wave c
-   status in wave b will be more influential on status in c than in a

```{r}
mod_null_T1 <- glm(
  current == 'Inactive' ~ 1, 
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)

mod_t1_T1 <- glm(
  current == 'Inactive' ~ last, 
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)

mod_t1a1_T1 <- glm(
  current == 'Inactive' ~ last + poly(age_at_start, 1), 
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)

mod_t1a2_T1 <- glm(
  current == 'Inactive' ~ last + poly(age_at_start, 2), 
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)
# I think I'll use this rather than 3rd order as marginal improvement 
#given BIC for 3rd order is small whereas issues with extrapoloation 
# are greater

mod_t1a3_T1 <- glm(
  current == 'Inactive' ~ last + poly(age_at_start, 3), 
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)

mod_t1a2s_T1 <- glm(
  current == 'Inactive' ~ last + poly(age_at_start, 2) + sex, 
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)


mod_t2a2s_T1 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex,
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)

mod_t2a2_T1 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2), 
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)

mod_interactions_T1 <- glm(
  current == 'Inactive' ~ sex * (last + previous) * poly(age_at_start, 2),
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)
# This mega-model is slightly preferred to the others but not a huge amount over 
# mod_t2a2s_T1

# So our final suggested model is mod_t2a2_T1

```

Having specified the series of models, we can compare penalised model fit for all of them using BIC

```{r}
BIC(mod_null_T1, mod_t1_T1, mod_t1a1_T1, mod_t1a2_T1, mod_t1a3_T1, mod_t1a2s_T1, mod_t2a2s_T1, mod_t2a2_T1, mod_interactions_T1)
AIC(mod_null_T1, mod_t1_T1, mod_t1a1_T1, mod_t1a2_T1, mod_t1a3_T1, mod_t1a2s_T1, mod_t2a2s_T1, mod_t2a2_T1, mod_interactions_T1)

```

We have generally gone for models with lower BIC, except we have not gone for a 3rd order polynomial, or for the model with many interaction terms. In both cases this is because, although BIC is slightly lower, models with many interaction terms, or using many polynomial terms, quickly become harder to explain and may be less accurate at out-of-sample forecasting.

So our final model specification is `mod_t2a2s_T1`.

i.e. - two previous time periods - linear and quadratic terms of age - and sex

For reasons of consistency, we will now fit the same model specification to T2, i.e. 2016-2019 (i.e. the last pre-pandemic period)

```{r}
mod_t2a2s_T2 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex,
  data = data_2016to2019 %>% filter(complete.cases(.)),
  family = 'binomial'
)
```

## Predictions based on model specs

Predictions about differences between T1 and T2

-   econ inactivity rates between sexes will have become more similar (continuing long-term trends)

-   there will be differences (?!) but we are not sure in which direction

-   reasons for assuming lower inactivity in T2:

    -   Long-term sickness rates falling but rate at which they fell slowing

    -   inactivity in lone parents fell

    -   increase in female state pension age (though only looking at up to age 60)

-   reasons for assuming higher inactivity in T2:

    -   Generally ageing working age population?

    -   Poorer health

    -   Longer-term implications of suppressed labour market from GFC (i.e. in short term may predict more transition from working to unemployed; but in longer term some will go to inactivity)

    -   Continuing increases in rates of full time education.

    -   unintended consequences of welfare reform could push more people into long-term sickness

```{r}

vignettes <- tribble(
  ~sex, ~age_at_start, ~previous, ~last,
  'male',50, 'Employed', 'Employed',
  'female',50, 'Employed', 'Employed',
  'male',50, 'Inactive', 'Inactive',
  'female',50, 'Inactive', 'Inactive',

  'male',20, 'Employed', 'Employed',
  'female',20, 'Employed', 'Employed',
  'male',20, 'Inactive', 'Inactive',
  'female',20, 'Inactive', 'Inactive'
  
)

vignettes_T1 <- vignettes %>% 
  mutate(
    prediction = predict(
      mod_t2a2s_T1, newdata = vignettes, type = 'response'
    )
  )

vignettes_T2 <- vignettes %>% 
  mutate(
    prediction = predict(
      mod_t2a2s_T2, newdata = vignettes, type = 'response'
    )
  )



```

Let's use expand_grid to produce all possible combinations

```{r}
all_vignettes <- 
  expand_grid(
    sex = c("male", "female"),
    age_at_start = 16:60,
    last = c("Employed", "Unemployed", "Inactive"),
    previous = c("Employed", "Unemployed", "Inactive")
  )

all_vignettes_T1 <- all_vignettes %>% 
  mutate(
    prediction = predict(
      mod_t2a2s_T1, newdata = all_vignettes, type = 'response'
    )    
  )


all_vignettes_T2 <- all_vignettes %>% 
  mutate(
    prediction = predict(
      mod_t2a2s_T2, newdata = all_vignettes, type = 'response'
    )    
  )


all_vignettes <- 
  bind_rows(
    all_vignettes_T1 %>% 
      mutate(period = "T1"),
    all_vignettes_T2 %>% 
      mutate(period = "T2")
  )


```

In `all_vignettes`, the variable last refers to t-1, and previous to t-2, i.e. one and two periods before the period whose economic inactivity status we want to predict.

T1 refers to the period 2009-2011, and T2 to 2016-2019.

First let's save this so it can be looked at in excel or other inappropriate statistical software.

```{r}
write_csv(all_vignettes, file = here("data/predictions_of_inactivity_T1T2_using_ukhls.csv"))
```

## Visualise the above predictions

```{r}
all_vignettes %>% 
  mutate(
    p = str_extract(previous, "^[A-Z]{1}"),
    l = str_extract(last, "^[A-Z]{1}")
  ) %>% 
  mutate(
    econ_hist = glue::glue("{p}{l}")
  ) %>% 
  ggplot(aes(
    x = age_at_start, y = prediction, 
    group = paste(sex, period), colour = sex,
    linetype = period
  )) +
  scale_linetype_manual(values = c("dashed", "solid")) +
  facet_wrap(~ econ_hist, ncol = 3) + 
  geom_line() +
  expand_limits(y = c(0, 1)) + 
  labs (
    x = "Age at start of period in years",
    y = "Predicted probability of economic inactivity",
    title = "Predicted probabilities of economic inactivity",
    caption = "E: Employed; I: Inactive; U: Unemployed",
    subtitle = "Facet labels indicate economic status in previous two periods"
  )
```

Let's save this figure

```{r}
ggsave(here("figures/pred_prob_inact_ukhls.png"), height = 20, width = 20, units = "cm", dpi = 300)
```

## Adding more variables

We next want to add more predictor variables:

-   **Highest qualification (a_hiqual_dv, j_hiqual_dv);**

-   **Income (a_fihhmnnet3_dv, j_fihhmnnet3_dv);**

-   **Household type (hhtype_dv)**

first highest qualification

```{r}
mod_t2a2sq_T1 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex + highest_qualification,
  data = data_2009to2011 %>% 
    mutate(highest_qualification = factor(highest_qualification, levels = c("Intermediate qualifications", "No qualification", "Degree or above"))) %>% 
    filter(complete.cases(.)), 
  family = 'binomial'
)

mod_t2a2s_T1_v2 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex,
  data = data_2009to2011 %>% 
    mutate(highest_qualification = factor(highest_qualification, levels = c("Intermediate qualifications", "No qualification", "Degree or above"))) %>% 
    filter(complete.cases(.)), 
  family = 'binomial'
)

BIC(mod_t2a2sq_T1, mod_t2a2s_T1_v2)

```

When highest qualification is reduced to three levels, and missing has been properly excluded as NA, the penalised model fits are much more similar.

```{r}
summary(mod_t2a2sq_T1)
```

With Intermediate Qualifications as the reference level, both degree and above, and no qualification categories, are now statistically significant at p \< 0.05

```{r}
mod_t2a2sq2_T1 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex + no_quals,
  data = data_2009to2011 %>% filter(complete.cases(.)) %>% 
    mutate(no_quals = highest_qualification == "No qualification"), 
  family = 'binomial'
)

BIC(mod_t2a2sq2_T1, mod_t2a2s_T1_v2)
```

So, including a simple binary indicator for whether someone has no qualifications does lead to a slight improvement in BIC. I'm not sure this improvement in fit is worth its inclusion, however.

Recommendation from Martin is to include three part qualification grouping:

-   no qualifications

-   At least one degree

-   Other (reference)

TO DO:

-   [x] Compare three group version against baseline

## Grouping household types

```{r}
hh_regroupings <- tribble(
  ~new, ~original,
"Single pensioner",	"1 male, aged 65+, no children",
"Single pensioner",	"1 female, age 60+, no children",
"Single adult",	"1 adult under pensionable age, no children",
"Single parent",	"1 adult, 1 child",
"Single parent",	"1 adult, 2 or more children",
"Working age couple no children",	"Couple both under pensionable age, no children",
"Pensioner couple",	"Couple 1 or more over pensionable age,no children",
"Family with 1-2 children",	"Couple with 1 child",
"Family with 1-2 children",	"Couple with 2 children",
"Family with 3 or more children",	"Couple with 3 or more children",
"Other households",	"2 adults, not a couple, both under pensionable age, no children",
"Other households",	"2 adults, not a couple, one or more over pensionable age, no children",
"Other households",	"2 adults, not a couple, 1 or more children",
"Large adult, no children",	"3 or more adults, no children, incl. at least one couple",
"Family with 1-2 children",	"3 or more adults, 1-2 children, incl. at least one couple",
"Family with 3 or more children",	"3 or more adults, >2 children, incl. at least one couple",
"Large adult, no children",	"3 or more adults, no children, excl. any couples",
"Family with 1-2 children",	"3 or more adults, 1 or more children, excl. any couples"
)
```

```{r}
mod_t2a2sh_T1 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex + hh_type,
  data = data_2009to2011 %>% filter(complete.cases(.)), 
  family = 'binomial'
)
```

```{r}
BIC(mod_t2a2s_T1, mod_t2a2sh_T1)
```

As expected the penalised fit is now much worse.

Now let's use simplified categories and see how the penalised fit changes

```{r}
mod_t2a2sh2_T1 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex + hh_type,
  data = data_2009to2011 %>% 
    left_join(hh_regroupings, by = c("hh_type" = "original")) %>% 
    select(-hh_type) %>% 
    rename(hh_type = new) %>% 
    mutate(
      hh_type = factor(hh_type, levels = c(
        "Single adult",
        "Single parent", 
        "Single pensioner",
        "Family with 1-2 children",
        "Family with 3 or more children",
        "Large adult, no children",
        "Pensioner couple",
        "Working age couple no children",
        "Other households"
      ))
    ) %>% 
    filter(complete.cases(.)), 
  family = 'binomial'
)
```

Now to compare the models

```{r}
BIC(mod_t2a2s_T1, mod_t2a2sh_T1, mod_t2a2sh2_T1)

```

Using a reduced number of model parameters does improve penalised fit, but it's still worse than if it hadn't been included. Now let's look at the coeffs

```{r}
summary(mod_t2a2sh2_T1)
```

I've changed the reference category to single adult household (given, for example, these were the first groups UC was introduced to). Compared with this reference category no groups appear statistically significantly different, at least once age and age squared are included.

n.b. I've limited the data to age 16-60 so shouldn't expect many pensioners in the sample!

```{r}
mod_t2a2sh2_interaction_T1 <- glm(
  current == 'Inactive' ~ last + previous + poly(age_at_start, 2) + sex * hh_type,
  data = data_2009to2011 %>% 
    left_join(hh_regroupings, by = c("hh_type" = "original")) %>% 
    select(-hh_type) %>% 
    rename(hh_type = new) %>% 
    mutate(
      hh_type = factor(hh_type, levels = c(
        "Single adult",
        "Single parent", 
        "Single pensioner",
        "Family with 1-2 children",
        "Family with 3 or more children",
        "Large adult, no children",
        "Pensioner couple",
        "Working age couple no children",
        "Other households"
      ))
    ) %>% 
    filter(complete.cases(.)), 
  family = 'binomial'
)
```

```{r}
BIC(mod_t2a2s_T1, mod_t2a2sh_T1, mod_t2a2sh2_T1, mod_t2a2sh2_interaction_T1)
```

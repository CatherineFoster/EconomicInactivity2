---
title: "parenting_effects"
format: html
editor: visual
---

## Aim

The aim of this notebook is to investigate the estimated impact that having a child in the household has on labour market engagement, in particular the effect that having a first child has on the probability of those in employment leave employment.

After doing this, the notebook will look at the effect that different levels of equivalised household income has on remaining employed.

## Preparation

We need to do the following:

-   Get individual basic info from indresp files

-   Attach hh level attributes allowing the following to be derived

    -   Equivalised income

    -   Household type

        -   Whether has partner

        -   Whether has child

Here are the variables in hhresp identified previously:

There are quite a lot of variables to consider, all within the \_hhresp files

**Demographics**

-   `numadult` : number of adults in hh
-   `numchild` : number of children (0-15) in hh
-   `nunder10` : number of children under 10 in hh
-   `hhsize` : size of household
-   `ncouple_dv` : number of couples in hh
-   `nonepar_dv` : number of lone parents in hh
-   `nkids_dv` : number of children in hh
-   `nch02_dv` : number of children 0-2 years old in hh
-   `nch34_dv` : number of children 3-4 years old in hh
-   `nch511_dv` : number of children 5-11 years old in hh
-   `nch1215_dv` : number of children 12-15 years old in hh
-   `agechy_dv`: age of youngest child in HH
-   `npens_dv` : number of people over pensionable age in hh
-   `nemp_dv` : number employed in hh
-   `nuw_dv` : number not in paid employment in hh
-   `nwage_dv` : number working age in hh
-   `hhtype_dv`

**Income and Expenditure**

-   `fihhmngrs_dv`: total gross monthly household income - month before interview

-   `fihhmnlabgrs_dv`: total gross household labour income - month before interview

-   `fihhmnnet1_dv` : total household net income - no deductions

-   `fihhmnlabnet_dv` : total net household labour income - month before interview

-   `fihhmnmisc_dv` : total household misc income - month before interview

-   `fihhmnprben_dv` : total household private benefit income - month before interview

-   `fihhmninv_dv`: total household investment income - month before interview

-   `fihhmnpen_dv` : total household pension income - month before interview

-   `fihhmnsben_dv`: total household social benefit income - month before interview

-   `houscost1_dv` : monthly housing costs including mortgage principal payments

-   `ieqmoecd_dv` : modified OECD equivalence scale

-   `fihhmngrs_if` : share of imputed HH total income

```{r}


library(tidyverse)
# library(haven)
# library(here)
library(nnet)

# devtools::load_all(here('R'))
# base_dir_location <- "big_data/UKDA-6614-stata/stata/stata13_se/ukhls"
# indresp_files <- dir(here(base_dir_location), pattern = "[a-z]_indresp.dta", full.names = TRUE)

varnames <-  c(
  "jbstat", "dvage", "sex"
  )

vartypes <- c(
  "labels", "values", "labels"
  )

df_ind <- get_ind_level_vars_for_selected_waves(varnames = varnames, vartypes = vartypes, waves = letters[1:11])

# Clean the data 
df_ind <- 
  df_ind |> 
  # dvage uses negative values to indicate missing. The code below explicitly turns them all to missing values
    mutate(across(dvage, function(x) ifelse(x < 0, NA, x))) %>% 
    filter(complete.cases(.)) |> 
  # This renames dvage to age
    rename(age = dvage) |> 
    filter(between(age, 16, 64))  

df_joined <- 
  add_hh_variables(
    df = df_ind,
    varnames = c(
      "hhtype_dv"
    ), 
    vartypes = c(
      "labels"
    )
  )
df_joined
```

We can now turn the hhtype_dv variable into something that flags whether the hh includes children or not

```{r}
df_joined |> 
  left_join(
    simplified_household_lookup, 
    by = c('hhtype_dv' = 'original')
  )

```

We really want to identify those individuals whose `has_children` flag was `FALSE` in wave T and `TRUE` in wave T+1.

```{r}
temp <- 
  df_joined |> 
    left_join(
      simplified_household_lookup, 
      by = c('hhtype_dv' = 'original')
    ) |> select(pidp, wave, has_children) |> 
    mutate(
      wavenum = purrr::map_dbl(
        wave, 
        function(x) which(letters %in% x)
      )
    ) 

child_status_change_inds <- 
  temp |> 
    left_join(
      temp |> 
        select(-wave) |> 
        rename(get_children = has_children) |> 
        mutate(
          next_wavenum = wavenum + 1
        ) |> 
        select(-wavenum)
      , 
      by = c("pidp" = "pidp", "wavenum" = "next_wavenum")
      )


```

Now let's find those individuals where `had_children` is `FALSE` and `has_children` is `TRUE`:

```{r}
new_child_personwaves <- 
  child_status_change_inds |> 
    filter(!has_children & get_children) |> 
    select(pidp, wave) |> 
    mutate(new_children = TRUE)
```

Now this needs to be used to create a flag

```{r}
df_joined_get_children <- 
  df_joined |> 
    left_join(new_child_personwaves) |> 
    mutate(new_children = ifelse(is.na(new_children), FALSE, TRUE))
```

We can not start to model the effects of a new child on economic (in)activity transitions.

As before we can build up the model specification complexity and see where the sweet spot is

```{r}
# baseline specification: does not include new_children
mod_00 <- nnet::multinom(
    next_status ~ this_status * sex + splines::bs(age, 5) ,
    data = df_joined_get_children
  )

# first specification: new_children as simple indicator
mod_01 <- nnet::multinom(
    next_status ~ this_status * sex + splines::bs(age, 5) + new_children,
    data = df_joined_get_children
  )

# second specification: new_children affects males and females differently
mod_02 <- nnet::multinom(
  next_status ~ this_status * sex + splines::bs(age, 5) + new_children * sex, 
  data = df_joined_get_children
)



```

```{r}
AIC(mod_00, mod_01, mod_02)
BIC(mod_00, mod_01, mod_02)


```

Nope. Either model does not outperform the baseline model.

This is likely because the important variable is has_children, not get_children, i.e. a status flag rather than a status change flag.

Let's look at the status flag

```{r}
df_joined_hhchars <- 
  df_joined |> 
    left_join(
      simplified_household_lookup, 
      by = c('hhtype_dv' = 'original')
    )

  
```

```{r}
# baseline specification: does not include new_children
mod_00 <- nnet::multinom(
    next_status ~ this_status * sex + splines::bs(age, 5) ,
    data = df_joined_hhchars |> 
      filter(!is.na(has_children))
  )

# first specification: has_children as simple indicator
mod_01 <- nnet::multinom(
    next_status ~ this_status * sex + splines::bs(age, 5) + has_children,
    data = df_joined_hhchars
  )

# second specification: has_children affects males and females differently
mod_02 <- nnet::multinom(
  next_status ~ this_status * sex + splines::bs(age, 5) + has_children * sex, 
  data = df_joined_hhchars
)

```

```{r}
AIC(mod_00, mod_01, mod_02)
BIC(mod_00, mod_01, mod_02)


```

Now the model including the term and interactions with sex outperforms the others.

Let's see what this model implies for, say, a 30 year old female compared with a 30 year old male

```{r}
vignettes <- expand_grid(
  age = 30, 
  sex = c("male", "female"),
  this_status = c("Employed"),
  has_children = c(FALSE, TRUE)
)

predictions <- predict(mod_02, newdata = vignettes, type = "probs")


predictions_predictors <- 
  bind_cols(
    vignettes, predictions
  )

predictions_predictors
```

What's the broader schedule by age?

```{r}

vignettes <- expand_grid(
  age = 18:50, 
  sex = c("male", "female"),
  this_status = c("Employed"),
  has_children = c(FALSE, TRUE)
)

predictions <- predict(mod_02, newdata = vignettes, type = "probs")


predictions_predictors <- 
  bind_cols(
    vignettes, predictions
  ) |> 
  pivot_longer(
    `Employed`:`Unemployed`, 
    names_to = 'next_status', 
    values_to = 'probability'
  )

predictions_predictors |> 
  filter(next_status == 'Employed') |> 
  ggplot(
    aes(
      x = age, 
      y= probability, 
      group = has_children, linetype = has_children, colour = has_children
    )
  ) +
  geom_line() + 
  facet_wrap(~sex) + 
  labs(
    x = "Age in years", 
    y = "Predicted probability of remaining employed in next wave",
    title = "Predicted effects of havhing children on remaining employed in next wave by age and sex"
  )
  
```

And the same idea but for either becoming unemployed or becoming a full time carer

```{r}
predictions_predictors |> 
  filter(next_status %in% c('Unemployed', 'Inactive care') )|> 
  ggplot(
    aes(
      x = age, 
      y= probability, 
      group = has_children, linetype = has_children, colour = has_children
    )
  ) +
  geom_line() + 
  facet_grid(next_status ~ sex) + 
  labs(
    x = "Age in years", 
    y = "Predicted probability of moving to this stage in next wave",
    title = "Predicted effects of having children on on becoming unemployed or a full time carer in next wave by age and sex"
  )

```
